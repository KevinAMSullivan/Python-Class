#Exercise 2.1: Make a Fahrenheit-Celsius conversion table: 

#Write a Python program that prints out a table with Fahrenheit degrees 0;10;20;:::; 100 in the ﬁrst column and the corresponding Celsius degrees in the second column
#Hint Modify the c2f_table_while.py program from Sect. 2.1.2. Filename: f2c_table_while.

F=0
while  F<=100:
	C = (F-32)*(5/9)
	print(F,'\t',C)
	F = F + 10

---------

####Exercise 2.2: Generate an approximate Fahrenheit-Celsius conversion table:
 
#Many people use an approximate formula for quickly converting Fahrenheit (F) to Celsius (C) degrees: 
#	C  O C D .F 30/=2 (2.2) 
#Modify the program from Exercise 2.1 so that it prints three columns: F, C, and the approximate value O C. Filename: f2c_approx_table.

F=0
while  F<=100:
	C = (F-32)*(5/9)
	OC = (F-30)/2
	print(F,'\t',C,'\t',OC)
	F = F + 10

--------
	
#Exercise 2.3: Work with a list -Set a variable "primes" to a list containing the numbers 2, 3, 5, 7, 11, and 13:

#Write out each list element in a for loop. 
#Assign 17 to a variable p and add p to the end of the list. 
#Print out the entire new list. Filename: primes.

primes = [2,3,5,7,11,13]
for n in primes: 
	print(n)
	
p = 17
primes.append(p)
print(primes)

-----------

#Exercise 2.4: Generate odd numbers
#Write a program that generates all odd numbers from 1 to "n". 
#Set "n" in the beginning of the program and use a while loop to compute the numbers. 
#Make sure that if n is an even number, the largest generated odd number is n-1. Filename: odd.

n = 21
x = 1
while x <= n: 
	print(x)
	x = x + 2

------------	

#Exercise 2.5: Compute the sum of the ﬁrst n integers 
#Write a program that computes the sum of the integers from 1 up to and including n
#Compare the result with the famous formula n(n+1)/2. Filename: sum_int.

n = 10
s = 0 
sum = 0
while s <= n: 
	added = sum + s 
	sum = added
	s = s + 1
	print("not at n yet")

#can't be tabbed after the final statement in the while loop or it won't follow next command. Took me a few minutes 

print(sum)
formula = n*(n+1)/2
print(formula)
sum == formula 

-------

#Exercise 2.6: Compute energy levels in an atom 

#The n-th energy level for an electron in a Hydrogen atom is given by 
#	# = -1 * (m*e**4 / 8*sigma**2*h**2) * (1 / n**2)
#where me D 9:1094 1031 kg is the electron mass, e D 1:6022 1019 C is the elementary charge, 0 D8:85421012 C2 s2 kg1 m3 is the electrical permittivity of vacuum, and hD 6:62611034 Js. a) 
#a)Write a Python program that calculates and prints the energy level En for n = 1;...20 

m = 9.1094E-31
e = 1.6022E-19
sigma = 8.8542E-12
h = 6.6261E-31
deltaE = -1 * (m*e**4 / 8*sigma**2*h**2) * (1 / n**2)
#what the answer should be if n=20
betaE = -1 * (m*e**4 / 8*sigma**2*h**2) * (0.0025)
n = 1
while n <=20:
	print(deltaE)
	print(n)
	deltaE == betaE
	n = n + 1
	
#math's wrong

------

#b) The released energy when an electron moves from level ni to level nf is given by
#	deltaE = -1 * (m*e**4 / 8*sigma**2*h**2) * ((1 / n**2) - (1/f**2)): 
#Add statements to the program from a)so that it prints a second, nicely formatted table 
#	where the cell in column i and	row f contains the energy released when an electron moves from energy level i to level f  
#	for i,f = 1;...5 . Filename: energy_levels.

m = 9.1094E-31
e = 1.6022E-19
sigma = 8.8542E-12
h = 6.6261E-31
deltaE = -1 * (m*e**4 / 8*sigma**2*h**2) * ((1 / n**2) - (1/f**2))
sigmaE = -1 * (m*e**4 / 8*sigma**2*h**2) * ((1/)

ngl not sure what it's asking here 

-------

#Exercise 2.7: Generate equally spaced coordinates 

#We want to generate n+1 equally spaced x coordinates in [a,b]
# Store the coordinates in a list.
#a) Start with an empty list, use a forloop and append each coordinate to the list. 
#	Hint With n intervals, corresponding to n+1 points, in [a,b], each interval has length h= (b-a)/n 
#	The coordinates can then be generated by the formula xi = a + ih, i=0,...,n+1  

#b) Use a list comprehension as an alternative implementation.Filename: coor.

again, not sure what it's asking...

----------

#Exercise 2.8: Make a table of values from a formula 
#The purposeof this exercise is to write code that prints a nicely formatted table of t and y(t) values, where y(t) = v0t -1/2gt**2 
#Use n+1 uniformly spaced t values throughoutthe interval [0,2v0/g]
#a) Use a forloop to produce the table. 

y(t) = v0t -(1/2)*g*(t**2)
t = 0 

#b) Add code with a whileloop to produce the table.
#Hint Because of potential round-offerrors, you may need to adjust the upper limit of the whileloop to ensure that the last point 
#	(t = 2v0/g, y=0) is included. Filename: ball_table1.

y(t) = v0t -1/2gt**2
t = 2v0/g 
while y(t) <

----------	

#Exercise 2.9: Store values from a formula in lists 
#ThisexerciseaimstoproducethesametableofnumbersasinExercise2.8,butwith different code. 
#First, store the t and y values in two lists t and y. Thereafter, write out a nicely formatted table by traversing the two lists with a for loop.
#	Hint In the for loop, use either zip to traverse the two lists in parallel, or use an index and the rangeconstruction. Filename: ball_table2.

-------------

#Exercise 2.10: Simulate operations on lists by hand 

#You are given the following program:
#Go through each statement and explain what is printed by the program. Filename: simulate_lists.

a = [1, 3, 5, 7, 11] #you're creating a list of numbers shown
b = [13, 17] #another list, just shorter 
c = a + b #you're combining the lists into one 
print c #you're showing the new list on the screen 
b[0] = -1 #it's editing list b so that the 0th (aka first) number is now a -1
d =[ e+1 for e in a] #it's adding +1 to each value in list "a"
print(d) #showing it on teh screen 
d.append(b[0] + 1) #to the end of list "d", it's adding the value of b[0] (which is -1) +1 to make it a 0
d.append(b[-1] + 1) #now it's adding the last element of list b (17) + 1 (so 18) to list d 
print(d[-2:]) #it's printing from the 2nd last number towards the beginning in list d 
for e1 in a: #for the 2nd number in list a 
	for e2 in b: #for the 3rd number in list b
		print(e1 + e2) #print both numbers 
		
---------

#Exercise 2.11: Compute a mathematical sum 
#The following code is supposed to compute the sum (it's crazy just look at the page)
#	s = 0; k = 1; M = 100 while k < M: s += 1/k print s
#This program does not work correctly. What are the three errors? 

1-goes forever
2-s only goes up by 1 each time 
3-

#	If you try to run the program, nothing will happen on the screen. 
#	Type Ctrl+c, i.e., hold down the Control (Ctrl) key and then type the c key, to stop the program.) 
#Write a correct program.

no effin clue I'm not in high school anymore 
s = 0; k = 1; M = 100 
while k < M+1: 
	s += 1/k 
	k += 1
	print(s)


#	Hint There are two basic ways to ﬁnd errors in a program:
#		1. read the program carefully and think about the consequences of each statement, 
#		2. print out intermediate results and compare with hand calculations.
#	First, try method 1 and ﬁnd as many errors as you can. 
#	Thereafter, try method 2 for M D 3 and compare the evolution of s with your own hand calculations. Filename: sum_while.
	
-------------	
	
#Exercise 2.12: Replace a while loop by a for loop 
#RewritethecorrectedversionoftheprograminExercise2.11usingaforloopover k values instead of a whileloop. Filename: sum_for.

s = 0; k = 1; M = 100 
for k in range(0, M+1): 
	s += 1/k 
	k += 1
	print(s)

----------

#Exercise 2.13: Simulate a program by hand 
#Consider the following program for computing with interest rates:
initial_amount = 100 
p = 5.5 # interest rate 
amount = initial_amount 
years =0 
while amount <= 1.5*initial_amount: 
	amount = amount + p/100*amount 
	print(amount)
	print(years)
	years = years +1 

print(years)
#a) Use a pocket calculator or an interactive Python shell and work through the program calculations by hand. 
#	Write down the value of amount and years in each pass of the loop. 
	
see the 2 lines added 
	
#b) Set p=5 instead. 
#	Why will the loop now run forever? 
#		(Apply Ctrl+c, see Exercise 2.11, to stop a program with a loop that runs forever.) 
#		Make the program robust against such errors. 

It does not run forever for me...	

#c) Make use of the operator += wherever possible in the program. 

change years = years + 1 and amount = amount + whatever 

#d) Explain with words what type of mathematical problem that is solved by this program. Filename: interest_rate_loop.

How many years it'll take to pay off a loan 

---------------

E#xercise 2.14: Explore Python documentation Suppose you want to compute with the inverse sine function: sin-1x 
#How do you do that in a Python program?
#	Hint The math module has an inverse sine function. 
#	Find the correct name of the function by looking up the module content in the online Python Standard Library7 document or use pydoc, 
#		see Sect. 2.6.3. Filename: inverse_sine.
		
math.asine()
		
-------------
		
#Exercise 2.15: Index a nested list
#We deﬁne the following nested list:
#	q = [['a','b','c'],['d','e','f'],['g','h']]
#a) Index this list to extract 
#	1) the letter a; 
#	2) the list [’d’, ’e’, ’f’]; 
#	3) the last element h; 
#	4) thed element. 
#	Explain why q[-1][-2]has the value g. 
	
print(q[0][0])
print(q[1])
print(q[2][1])
print(q[1][[0])
because negatives start from teh back, so -1 means the first from the back (g and h) and -2 means 2nd from back (g)
	
#b) We can visit all elements of q using this nested forloop:
#	for i in q: 
#		for j in range(len(i)): 
#			print(i[j])
#	What type of objects are i and j? 

1-for each invidivual number in the list "q":
2-for each individual value in the range "i" (which is the length of whatever value is used in the list "q")
3-print the jth value in the range "i"

-----------------

#Exercise 2.16: Store data in lists 
#Modify the program from Exercise 2.2 so that all the F, C, OC values are stored in separate lists F, C, and C_approx, respectively. 
#Then make a nested list conversion so that conversion[i] holds a row in the table: 
#	[F[i], C[i], C_approx[i]]. 
#Finally, let the program traverse the conversion list and write out the same table as in Exercise 2.2. Filename: f2c_approx_lists.

F = [ ]
C = [ ]
OC = [ ]

eff=0
while  eff<=100:
	see = (eff-32)*(5/9)
	C.append(see)
	F.append(eff)
	ohsee = (eff-30)/2
	OC.append(ohsee)
	print(eff,'\t',see,'\t',ohsee)
	eff = eff + 10

nested = [C, F, OC]
print(nested)

-----------

Exercise 2.17: #Store data in a nested list 
#The purpose of this exercise is to store tabular data in two alternative ways, either as a list of columns or as a list of rows. 
#In order to write out a nicely formatted table, one has to traverse the data, and 
#	the technique for traversal depends on how the tabular data is stored.
#a) Compute two lists of t and y values as explained in Exercise 2.9. 
#	Store the two lists in a new nested list ty1 such that ty1[0] and ty1[1] correspond to the two lists. 
#	Write out a table with t and y values in two columns by looping over the data in the ty1list. 
#	Each number should be written with two decimals. 
	
Couldn't figure either out 

#b) Make alist ty2 which holds each row in the table of t and y values(ty1is a list of table columns while ty2 is a list of table rows, 
#	as explained in Sect. 2.4). 
#	Loop over the ty2list and write out the t and y values with two decimals each. Filename: ball_table3.


----------------

Exercise 2.18: #Values of boolean expressions 
#Explain the outcome of each of the following boolean expressions:
	C = 41 
	C == 40 
		False 
		since c is 41 it's not equal to 40
	C != 40 and C < 41 
		False
		the first part is true (41 is not 40) but the 2nd isn't so all in all it's false 
	C != 40 or C < 41 
		True 
		since this is an or statement, that the first one is true makes this true 
	not C == 40 
		True
		since c is 41, not c could be equal to 40
	not C > 40 
		False 
		since c is in fact > 40, there is not 100% chance that a number might equal 41
	C <= 41 
		True 
		since C == 41, then it's equal to 41
	not False 
		
	True and False 
	False or True 
	False or False or False 
	True and True and False 
	False == 0 
	True == 0 
	True == 1
#Note It makes sense to compare True and False to the integers 0 and 1, but not other integers 
#	(e.g., True == 12 is False although the integer 12 evaluates to True in a boolean context, as in bool(12)or if 12).Filename: eval_bool.
	
----------

Exercise 2.19: #Explore round-off errors from a large number of inverse operations 
#Maybe you have tried to hit the square root key on a calculator multiple times and then squared the number again an equal number of times? 
#These set of inverse mathematical operations should of course bring you back to the starting value for the computations, 
#	but this does not always happen. 
#To avoid tedious pressing of calculator keys, we can let a computer automate the process. Here is an appropriate program:
	from math import sqrt 
	for n in range(1, 60): 
		r = 2.0 
		for i in range(n): 
		r = sqrt(r) 
		for i in range(n): 
			r = r**2 
		print ’%d times sqrt and **2: %.16f’ %( n, r)
#Explain with words what the program does. Then run the program. 
#	Round-off errors are here completely destroying the calculations when n is large enough! 
#	Investigate the case when we come back to 1 instead of 2 by ﬁxing an n value where this happens and printing outrin bothforloopsoveri. 
#	Can younow explainwhy we come back to 1 and not 2? Filename: repeated_sqrt.
	
------------
	
Exercise 2.20: #Explore what zero can be on a computer 
#Type in the following code and run it:
eps = 1.0 
while 1.0 != 1.0 + eps: #basically saying it'll run till eps hits 0
	print ’...............’, eps # 
	eps = eps/2.0 #reducing teh value of eps for the next run 
print ’final eps:’, eps #showing what the final value of eps is 

#Explain with words what the code is doing, line by line. Then examine the output. 
#How can it be that the “equation” 1 ¤ 1Ceps is not true? 

Dunno, guess it's gotta stop somewhere...

#	Or in other words, that anumberofapproximatelysize1016 (theﬁnalepsvaluewhentheloopterminates) gives the same result as if epswere zero?Filename: machine_zero.
#Remarks The nonzero eps value computed above is called machine epsilon or machine zero andis an important parameterto know,especially whencertain mathematical techniques are applied to control round-offerrors.

--------------------

Exercise 2.21: #Compare two real numbers with a tolerance Run the following program:
#a = 1/947.0*947 
#b =1 
#if a != b: 
#	print ’Wrong result!’

#The lesson learned from this program is that one should never compare two ﬂoating-point objects directly using a == bor a != b, 
#	because round-off errors quickly make two identical mathematical values different on a computer. 
#A better result is to test if abs(a - b) < tol, wheretol is a very small number. 
#Modify the test according to this idea. Filename: compare_floats.

not sure what 'tol' is or why i have to figure it out this way 

-----------------

Exercise 2.22: #Interpret a code 
#Thefunctiontimeinthemoduletimereturnsthenumberofsecondssinceaparticulardate(
#	calledtheEpoch,whichisJanuary1,1970,onmanytypesofcomputers). 
#	Python programs can therefore use time.time()to mimic a stop watch. 
#Another function, time.sleep(n)causes the program to pause for n seconds and is handy forinserting a pause. 
#Use thisinformationto explain what the followingcode does:
import time 
t0 = time.time() 
while time.time() - t0 < 10: 
	print('....I like while loops!') 
	time.sleep(2) 

print('Oh, no - the loop is over.')

#How many times is the print statement inside the loop executed? 

5

#Now, copy the code segment and change the < sign in the loop condition to a > sign. Explain what happens now. Filename: time_while.

FOR.EV.ER. 

--------------

Exercise 2.23: #Explore problems with inaccurate indentation 
#Type in the following program in a ﬁle and check carefully that you have exactly the same spaces:
C = -60; dC =2 
while C <= 60: 
	F = (9.0/5)*C + 32 
		print C, F C = C + dC
#Run the program. What is the ﬁrst problem? 

Indentation error, print should not be tabbed in

#What is the next problem? What is the cause of that problem? 

Need parentheses to print AND comma to separate different things to print AND i guess you can't make a new variable in the print statement
	fixing the issue makes the program run for a long time 

#(See Exercise 2.11 for how to stop a hanging program.) Filename: indentation.
#Remarks The lesson learned from this exercise is that one has to be very careful with indentation in Python programs! Other computer languages usually enclose blocks belonging to loops in curly braces, parentheses, or begin-end marks. Python’sconventionwith using solely indentation contributes to visually attractive, easy-to-read code, at the cost of requiring a pedantic attitude to blanks from the programmer.

----------------


Exercise 2.24: #Explore punctuation in Python programs 
#Some of the following assignments work and some do not. 
#Explain in each case why the assignment works/fails and, if it works, what kind of object x refers to and what the value is if we do a print x.
	x =1 
	x = 1. 
	x = 1; 
	x = 1! 
	x = 1? 
	x = 1: 
	x = 1,
	#	Hint Explore the statements in an interactive Python shell. Filename: punctuation.

---------

Exercise 2.25: Investigate a for loop over a changing list 
Study the following interactive session and explain in detail what happens in each pass of the loop, and use this explanation to understand the output.
>>> numbers = range(10) #numbers is a list of 10 numbers starting from 0
>>> print(numbers ) #show numbers on screen 
	[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 
>>> for n in numbers: ... #for each individual number in the range 
	i = len(numbers)/2 ... #i is 10/2 = 5
	del numbers[i] ... #delete i from the list 
	print(’n=%d, del %d’ %( n,i), numbers ) #print what number you started with, the number deleted, and the range 
	... 
n=0, del 5 [0, 1, 2, 3, 4, 6, 7, 8, 9] 
n=1, del 4 [0, 1, 2, 3, 6, 7, 8, 9] 
n=2, del 4 [0, 1, 2, 3, 7, 8, 9] 
n=3, del 3 [0, 1, 2, 7, 8, 9] 
n=8, del 3 [0, 1, 2, 8, 9]
#Warning The message in this exercise is to never modify a list that we are looping over. 
#	Modiﬁcation is indeed technically possible, as shown above,but youreally need to know what you are doing. 
#	Otherwise you will experience very strange program behavior. Filename: for_changing_list.

















